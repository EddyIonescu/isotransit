// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Axios = require("axios");
var React = require("react");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Map$MultimodalIsochrone = require("./map.js");
var Location$MultimodalIsochrone = require("./location.js");
var SelectType$MultimodalIsochrone = require("./selectType.js");
var DateTimePicker$MultimodalIsochrone = require("./dateTimePicker.js");

((require('./app.css')));

var selectOptions = /* array */[
  {
    value: /* Transit */0,
    label: "GRT/Walking (30 min)"
  },
  {
    value: /* Driving */1,
    label: "Driving (30 min)"
  },
  {
    value: /* Ion */2,
    label: "ION LRT + 10-minute Rideshare"
  },
  {
    value: /* IonTransitOnly */3,
    label: " ION LRT + 20-minute GRT/Walking"
  }
];

var ionStops = /* array */[
  /* float array */[
    -80.52945144,
    43.49813693
  ],
  /* float array */[
    -80.54321203,
    43.49721126
  ],
  /* float array */[
    -80.54515806,
    43.48162357
  ],
  /* float array */[
    -80.5411648,
    43.4732381
  ],
  /* float array */[
    -80.53440443,
    43.46885718
  ],
  /* float array */[
    -80.52298867,
    43.46414138
  ],
  /* float array */[
    -80.52336904,
    43.462144
  ],
  /* float array */[
    -80.51836079,
    43.45983591
  ],
  /* float array */[
    -80.49913146,
    43.45317562
  ],
  /* float array */[
    -80.48734599,
    43.44964771
  ],
  /* float array */[
    -80.49370802,
    43.4501848
  ],
  /* float array */[
    -80.4894232,
    43.448626
  ],
  /* float array */[
    -80.4753731,
    43.44240342
  ],
  /* float array */[
    -80.48359184,
    43.4462947
  ],
  /* float array */[
    -80.47787648,
    43.43358158
  ],
  /* float array */[
    -80.44180343,
    43.42232678
  ],
  /* float array */[
    -80.49080288,
    43.45192775
  ],
  /* float array */[
    -80.46308195,
    43.42282486
  ],
  /* float array */[
    -80.51205622,
    43.45728346
  ]
];

function getIsochrone(state, specifiedLocation) {
  var selectedLocation = specifiedLocation ? specifiedLocation[0] : state[/* selectedLocation */0];
  var match = state[/* selectedTravelType */3];
  var offset = match === 2 || match === 1 ? 0 : -18000000;
  var match$1 = state[/* selectedTravelType */3];
  var match$2 = state[/* selectedTravelType */3];
  var tmp;
  switch (match$2) {
    case 1 : 
    case 2 : 
        tmp = "driving";
        break;
    case 0 : 
    case 3 : 
        tmp = "transit";
        break;
    
  }
  var match$3 = state[/* selectedTravelType */3];
  var tmp$1;
  switch (match$3) {
    case 1 : 
    case 2 : 
        tmp$1 = "timeWithTraffic";
        break;
    case 0 : 
    case 3 : 
        tmp$1 = "time";
        break;
    
  }
  var params = {
    waypoint: Pervasives.string_of_float(selectedLocation[/* lat */0]) + ("," + Pervasives.string_of_float(selectedLocation[/* lng */1])),
    maxTime: match$1 !== 2 ? (
        match$1 >= 3 ? 20 : state[/* timeLengthMinutes */4]
      ) : state[/* shortTripTimeLengthMinutes */5],
    timeUnit: "minute",
    dateTime: new Date(state[/* selectedTime */1] + offset).toUTCString(),
    travelMode: tmp,
    optimize: tmp$1,
    "Access-Control-Allow-Origin": "*"
  };
  return Axios.post("https://dev.virtualearth.net/REST/v1/Routes/Isochrones?key=AtVkKGv4bwzxrZD4WGdKDwPH3We4IJfA_TrzRWJbRMgrHxtT0nSqPFL4JN9TFEID", params).then((function (response) {
                  return Promise.resolve(List.nth(List.nth(response.data.resourceSets, 0).resources, 0).polygons);
                })).catch((function () {
                return Promise.resolve(/* None */0);
              }));
}

var component = ReasonReact.reducerComponent("App");

function make() {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (_self) {
      return React.createElement("div", undefined, ReasonReact.element(/* None */0, /* None */0, Location$MultimodalIsochrone.make((function (s) {
                            return Curry._1(_self[/* send */4], /* SelectedSuggestion */Block.__(0, [/* float array */[
                                            s.location.lat,
                                            s.location.lng
                                          ]]));
                          }), /* array */[])), React.createElement("button", {
                      onClick: (function () {
                          var match = _self[/* state */2][/* selectedTravelType */3];
                          Promise.all(match >= 2 ? $$Array.map((function (ionStop) {
                                            return getIsochrone(_self[/* state */2], /* Some */[/* float array */[
                                                          Caml_array.caml_array_get(ionStop, 1),
                                                          Caml_array.caml_array_get(ionStop, 0)
                                                        ]]);
                                          }), ionStops) : /* array */[getIsochrone(_self[/* state */2], /* None */0)]).then((function (polygons) {
                                    console.log(polygons);
                                    return Promise.resolve(Curry._1(_self[/* send */4], /* AddIsochrone */Block.__(4, [polygons.reduce((function (acc, polygon) {
                                                              if (polygon) {
                                                                acc.push(polygon[0]);
                                                                return acc;
                                                              } else {
                                                                return acc;
                                                              }
                                                            }), /* array */[])])));
                                  })).catch((function (error) {
                                  return Promise.resolve((console.log(error), /* () */0));
                                }));
                          return /* () */0;
                        })
                    }, React.createElement("h2", undefined, "Generate Isochrone")), ReasonReact.element(/* None */0, /* None */0, DateTimePicker$MultimodalIsochrone.make(_self[/* state */2][/* selectedTime */1], (function (selectedTime) {
                            return Curry._1(_self[/* send */4], /* UpdateSelectedTime */Block.__(2, [selectedTime]));
                          }), /* array */[])), ReasonReact.element(/* None */0, /* None */0, SelectType$MultimodalIsochrone.make((function (t) {
                            return Curry._1(_self[/* send */4], /* TransportSelection */Block.__(1, [t.value]));
                          }), selectOptions, _self[/* state */2][/* selectedTravelType */3], /* array */[])), ReasonReact.element(/* None */0, /* None */0, Map$MultimodalIsochrone.make({
                          lat: _self[/* state */2][/* selectedLocation */0][/* lat */0],
                          lng: _self[/* state */2][/* selectedLocation */0][/* lng */1]
                        }, _self[/* state */2][/* layers */7], /* array */[])));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* selectedLocation : float array */[
                43.4684405,
                -80.5418298
              ],
              /* selectedTime */Date.now(),
              /* movingAwayIso : true */1,
              /* selectedTravelType : Transit */0,
              /* timeLengthMinutes */30,
              /* shortTripTimeLengthMinutes */10,
              /* isochrones : [] */0,
              /* layers : array */[]
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      switch (action.tag | 0) {
        case 0 : 
            var newrecord = state.slice();
            return /* Update */Block.__(0, [(newrecord[/* selectedLocation */0] = action[0], newrecord)]);
        case 1 : 
            var newrecord$1 = state.slice();
            return /* Update */Block.__(0, [(newrecord$1[/* selectedTravelType */3] = action[0], newrecord$1)]);
        case 2 : 
            var newrecord$2 = state.slice();
            return /* Update */Block.__(0, [(newrecord$2[/* selectedTime */1] = action[0], newrecord$2)]);
        case 3 : 
            var newrecord$3 = state.slice();
            return /* Update */Block.__(0, [(newrecord$3[/* timeLengthMinutes */4] = action[0], newrecord$3)]);
        case 4 : 
            var newrecord$4 = state.slice();
            return /* Update */Block.__(0, [(newrecord$4[/* layers */7] = $$Array.append(state[/* layers */7], action[0]), newrecord$4)]);
        
      }
    });
  return newrecord;
}

exports.selectOptions = selectOptions;
exports.ionStops = ionStops;
exports.getIsochrone = getIsochrone;
exports.component = component;
exports.make = make;
/*  Not a pure module */
