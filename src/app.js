// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Axios = require("axios");
var React = require("react");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Map$MultimodalIsochrone = require("./map.js");
var Location$MultimodalIsochrone = require("./location.js");
var SelectType$MultimodalIsochrone = require("./selectType.js");
var DateTimePicker$MultimodalIsochrone = require("./dateTimePicker.js");

((require('./app.css')));

var selectOptions = /* array */[
  {
    value: /* Transit */0,
    label: "Transit"
  },
  {
    value: /* Driving */1,
    label: "Driving"
  }
];

function getIsochrone(selectedLocation, selectedTravelType, selectedTime, timeLengthMinutes) {
  var params = {
    waypoint: Pervasives.string_of_float(selectedLocation[/* lat */0]) + ("," + Pervasives.string_of_float(selectedLocation[/* lng */1])),
    maxTime: timeLengthMinutes,
    timeUnit: "minute",
    dateTime: new Date(selectedTime).toUTCString(),
    travelMode: selectedTravelType !== 0 ? "driving" : "transit",
    optimize: selectedTravelType !== 0 ? "timeWithTraffic" : "time"
  };
  return Axios.post("https://dev.virtualearth.net/REST/v1/Routes/Isochrones?key=Avj-tmXDH_oOb5wmY1yfBkJNSG4hBUVMraHAP5upxDqBLj6ni747Lagw40_4SsVZ", params).then((function (response) {
                return Promise.resolve(List.nth(List.nth(response.data.resourceSets, 0).resources, 0).polygons);
              }));
}

var component = ReasonReact.reducerComponent("App");

function make() {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (_self) {
      return React.createElement("div", undefined, ReasonReact.element(/* None */0, /* None */0, Location$MultimodalIsochrone.make((function (s) {
                            return Curry._1(_self[/* send */4], /* SelectedSuggestion */Block.__(0, [/* float array */[
                                            s.location.lat,
                                            s.location.lng
                                          ]]));
                          }), /* array */[])), React.createElement("button", {
                      onClick: (function () {
                          getIsochrone(_self[/* state */2][/* selectedLocation */0], _self[/* state */2][/* selectedTravelType */3], _self[/* state */2][/* selectedTime */1], _self[/* state */2][/* timeLengthMinutes */4]).then((function (polygons) {
                                    console.log(polygons);
                                    return Promise.resolve(Curry._1(_self[/* send */4], /* AddIsochrone */Block.__(4, [polygons])));
                                  })).catch((function (error) {
                                  return Promise.resolve((console.log(error), /* () */0));
                                }));
                          return /* () */0;
                        })
                    }, React.createElement("h2", undefined, "Get Basic Isochrone")), ReasonReact.element(/* None */0, /* None */0, DateTimePicker$MultimodalIsochrone.make(_self[/* state */2][/* selectedTime */1], (function (selectedTime) {
                            return Curry._1(_self[/* send */4], /* UpdateSelectedTime */Block.__(2, [selectedTime]));
                          }), /* array */[])), ReasonReact.element(/* None */0, /* None */0, SelectType$MultimodalIsochrone.make((function (t) {
                            return Curry._1(_self[/* send */4], /* TransportSelection */Block.__(1, [t.value]));
                          }), selectOptions, _self[/* state */2][/* selectedTravelType */3], /* array */[])), ReasonReact.element(/* None */0, /* None */0, Map$MultimodalIsochrone.make(_self[/* state */2][/* layers */6], /* array */[])));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* selectedLocation : float array */[
                43.4684405,
                -80.5418298
              ],
              /* selectedTime */Date.now(),
              /* movingAwayIso : true */1,
              /* selectedTravelType : Transit */0,
              /* timeLengthMinutes */30,
              /* isochrones : [] */0,
              /* layers : array */[]
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      switch (action.tag | 0) {
        case 0 : 
            var newrecord = state.slice();
            return /* Update */Block.__(0, [(newrecord[/* selectedLocation */0] = action[0], newrecord)]);
        case 1 : 
            var newrecord$1 = state.slice();
            return /* Update */Block.__(0, [(newrecord$1[/* selectedTravelType */3] = action[0], newrecord$1)]);
        case 2 : 
            var newrecord$2 = state.slice();
            return /* Update */Block.__(0, [(newrecord$2[/* selectedTime */1] = action[0], newrecord$2)]);
        case 3 : 
            var newrecord$3 = state.slice();
            return /* Update */Block.__(0, [(newrecord$3[/* timeLengthMinutes */4] = action[0], newrecord$3)]);
        case 4 : 
            var newrecord$4 = state.slice();
            return /* Update */Block.__(0, [(newrecord$4[/* layers */6] = action[0], newrecord$4)]);
        
      }
    });
  return newrecord;
}

exports.selectOptions = selectOptions;
exports.getIsochrone = getIsochrone;
exports.component = component;
exports.make = make;
/*  Not a pure module */
